buildscript {
    ext {
        springBootVersion = '2.1.1.RELEASE'
        springCloudVersion = 'Greenwich.RC2'
    }
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://repo.spring.io/release" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "http://repo.spring.io/plugins-release" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    }
}

plugins {
    id "com.gorylenko.gradle-git-properties" version "1.4.17"
    id "se.eugenekainara.docker" version "1.3.1"
}

version = '0.0.1-SNAPSHOT'

subprojects {
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/release" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://repo.spring.io/snapshot" }
    }
    apply plugin: "java"
    apply plugin: "idea"
    apply plugin: "io.spring.dependency-management"
    apply plugin: "org.springframework.boot"
    apply plugin: "com.gorylenko.gradle-git-properties"
    apply plugin: "docker"

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    springBoot {
        buildInfo()
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-starter-parent:${springBootVersion}"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    dependencies {
        testCompile "junit:junit:4.11"
        compile group: 'org.projectlombok', name: 'lombok', version: '1.18.4'
        compile "org.springframework.boot:spring-boot-autoconfigure"
        compile("net.logstash.logback:logstash-logback-encoder:5.2")
    }

    docker {
        baseImage 'openjdk:8-jdk-alpine'
        maintainer ''
    }

    task buildDocker(type: Docker, dependsOn: build) {
        push = project.hasProperty("push")
        tagVersion = !version.matches("(.*)SNAPSHOT") ? project.getVersion() : System.getenv('BRANCH_NAME') ?: "develop"
        tag = project.getName()
        stageDir = new File(project.buildDir, "libs")
    }

    jar {
        enabled = true
    }
    bootJar {
        classifier = 'boot'
    }

}
